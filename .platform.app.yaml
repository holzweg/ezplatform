# This file describes an application. You can have multiple applications
# in the same project.

# Please see doc/platformsh/README.md and doc/platformsh/INSTALL.md
# NB: Clustered eZ Platform setups are not tested and are likely to have issues.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: php:7.1
build:
    # "none" means we're running composer manually, see build hook
    flavor: "none"

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "mysqldb:mysql"
    redis: "rediscache:redis"
    #solr: "solr:endpoint0"


variables:
    php:
        "display_errors": "Off"
    env:
        # Enable a redis pool. this will be used in app/config/env/genric.php, and params will be set in env/platformsh.php
        CUSTOM_CACHE_POOL: 'singleredis'
        # Symfony cache is not meant to be shared in a cluster and recommendation is to rather use Fastly with platform.sh
        SYMFONY_HTTP_CACHE: 0

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "web"
            # The front-controller script to send non-static requests to.
            passthru: "/app.php"
            # The number of seconds whitelisted (static) content should be cache
            expires: 600

# The size of the persistent disk of the application (in MB).
disk: 2048

# The mounts that will be performed when the package is deployed.
mounts:
    # By default we try to avoid sharing cache folder as it introduces issues (the need to clear it on deploy, & performance)
    # To accomplish this cache like Doctrine ORM cache needs to be stored into APC(u) instead of on disk (see config_prod.yml)
    #"/app/cache": "shared:files/cache"
    "/app/logs": "shared:files/logs"
    "/web/var": "shared:files/files"

# The hooks that will be performed when the package is deployed.
hooks:
    build: |
        set -e
        rm web/app_dev.php
        . ./.env
        if [ -z "$SYMFONY_ENV" ]; then
            export SYMFONY_ENV=prod
        fi
        if [ "$SYMFONY_ENV" = "dev" ] ; then
            composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
        else
            composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader
        fi
         app/console --env=$SYMFONY_ENV cache:warmup
    deploy: |
        set -e
        . ./.env
        if [ -z "$SYMFONY_ENV" ]; then
            export SYMFONY_ENV=prod
        fi
        if [ ! -f web/var/.platform.installed ]; then
            php -d memory_limit=-1 app/console ezplatform:install --env=$SYMFONY_ENV $INSTALL_EZ_INSTALL_TYPE
            touch web/var/.platform.installed
        fi
        # If this is not a "fast-deploy" then typically you would want to migrate your data as well here
        #app/console --env=$SYMFONY_ENV doctrine:migrations:migrate --no-interaction --allow-no-migration
        #app/console --env=$SYMFONY_ENV kaliop:migration:migrate --no-interaction --no-debug

# The configuration of scheduled execution.
# see http://symfony.com/doc/current/components/console/introduction.html
#crons:
#    symfony:
#        spec: "*/20 * * * *"
#        cmd: "php cron.php example:test"

runtime:
    extensions:
        - xsl
        - imagick
        - redis
        - apcu
        - msgpack
        - readline
        - name: 'blackfire'
          configuration:
              server_id: 'xxxx-xxx-xxx-xxx-xxxx'
              server_token: 'xxxx'
